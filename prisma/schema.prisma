// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?

  posts Post[]
  users User[]
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  name          String
  emailVerified DateTime?
  image         String?
  password      String // Hashed in app
  role          Role            @default(READER)
  posts         Post[]
  comments      Comment[]
  subscriptions Subscription[]
  Authenticator Authenticator[]
  sessions      Session[]
  accounts      Account[]

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Media        Media[]
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?
  PostLike     PostLike[]
}

enum Role {
  READER
  REPORTER
  EDITOR
  ADMIN
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  slug  String @unique
  posts Post[]
}

model Post {
  id           Int         @id @default(autoincrement())
  title        String
  slug         String      @unique
  content      String
  excerpt      String?
  published    Boolean     @default(false)
  publishedAt  DateTime?
  author       User        @relation(fields: [authorId], references: [id])
  authorId     String
  category     Category    @relation(fields: [categoryId], references: [id])
  categoryId   Int
  comments     Comment[]
  tags         Tag[]
  media        Media[] // New: Supports images/videos/documents
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?
  likeCount    Int?        @default(0) // New: Like count for posts
  commentCount Int?        @default(0) // New: Comment count for posts
  viewCount    Int?        @default(0) // New: View count for posts
  PostLike     PostLike[]
  featured     Boolean     @default(false) // New: Feature flag for posts

  @@index([slug]) // Faster post lookup
  @@index([publishedAt]) // Sort by publish date
}

model PostLike {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId]) // Prevent multiple likes by same user on a post
}

// New: Media attachments (images, videos, PDFs, etc.)
model Media {
  id        Int       @id @default(autoincrement())
  url       String // Cloud URL (S3, Cloudinary, etc.)
  caption   String? // Optional caption for media
  type      MediaType
  width     Int? // For images/videos
  height    Int? // For images/videos
  duration  Int? // For videos (in seconds)
  format    String? // e.g., "jpg", "mp4", "pdf"
  size      Int? // File size in bytes
  author    User?     @relation(fields: [authorId], references: [id])
  authorId  String?
  post      Post?     @relation(fields: [postId], references: [id])
  postId    Int?
  createdAt DateTime  @default(now())
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT // PDFs, Word files
  AUDIO
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  createdAt DateTime @default(now())
}

model Subscription {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  plan     Plan     @default(BASIC)
  startsAt DateTime @default(now())
  endsAt   DateTime
}

enum Plan {
  BASIC
  PREMIUM
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
